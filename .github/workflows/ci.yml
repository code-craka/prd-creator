name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prd_creator_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install root dependencies
      run: npm ci

    - name: Install workspace dependencies
      run: |
        cd shared && npm ci
        cd ../backend && npm ci
        cd ../frontend && npm ci


    - name: Install dependencies
      run: npm ci

    - name: Build shared package
      run: |
        cd shared
        npm run build

    - name: Run TypeScript compiler
      run: |
        cd backend
        npm run build
        cd ../frontend
        npm run build
        npm run type-check
        cd ../frontend
        npm run type-check

    - name: Run linter
      run: npm run lint

    - name: Setup test database
      run: |
        cd backend
        cp .env.example .env
        sed -i 's/prd_creator_dev/prd_creator_test/g' .env
        sed -i 's/your_username/postgres/g' .env
        sed -i 's/your_password/postgres/g' .env
        NODE_ENV=test npm run db:migrate
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: prd_creator_test
        DB_NAME_TEST: prd_creator_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test-secret-for-ci
        NODE_ENV: test
        npm run db:migrate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prd_creator_test

    - name: Run backend tests
      run: |
        cd backend
        NODE_ENV=test npm run test
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: prd_creator_test
        DB_NAME_TEST: prd_creator_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test-secret-for-ci
        npm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prd_creator_test
        JWT_SECRET: test-secret
        NODE_ENV: test

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test

    - name: Build for production
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment"
        # Add staging deployment commands here

    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment"
        # Add production deployment commands here

    - name: Create GitHub release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from commit ${{ github.sha }}
          
          ## Changes
          ${{ github.event.head_commit.message }}
          
          ## Artifacts
          - Backend API deployed to production
          - Frontend deployed to production
          - Database migrations applied
        draft: false
        prerelease: false